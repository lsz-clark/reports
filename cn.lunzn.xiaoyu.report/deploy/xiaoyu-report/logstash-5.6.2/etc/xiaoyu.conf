input {
    beats {
        port => 15144
    }
}

filter {
	if [fields][log_type] == "xiaoyulog" {
		grok {
			patterns_dir => "/lunzn/report/xiaoyu-report/logstash-5.6.2/etc/operate-pattern"
			match=>{"message"=>'\[INFO \] %{STR:logdate} --> MyLog:?%{STR:interfaceName}\|%{STR:datajson}\|'}
		}
		json {
			source => "datajson"
            #target => "doc"
            remove_field => ["datajson","message","source","@version","input_type","beat","host","groupId","mvId","offset","oldcompany","operate","oldcoversion","providerSoftVsn"]
		}
		json {
			source => "data"
            #target => "doc"
			remove_field => ["data","url","definition","lang","volumeindex","sourceid","groupid","mvid","volumeid","windowId","opXiriPurpose","opCondition","opTime","C","D","E","F","day","date","channelId","opType","sdkversion","opFromWin","deviceVsn"]
		}
		ruby {
            code => "event.set('datatype', event.get('type')); event.set('type', 'log')"
			remove_field => ["datatype","fields.log_type","fields","area","director","list","seriesid","windowId","actor","size","endTime","lastsourceid","typeid"]
        }
	}
	ruby {
        code => "event.set('timestamp', event.get('@timestamp').time.localtime + 8*60*60); event.set('@timestamp', event.get('timestamp'))" 
		remove_field => ["@timestamp","timestamp","startTime","mvId","grouptype","topgroup","lastdefinition","releaseTime","auto","G","groupId","start","tags","page"]
    }
}

output {
	elasticsearch {
        hosts => ["192.168.30.251:9200"]
        index => "xiaoyu-inteface-log"
        manage_template => true
        flush_size => 50000
        idle_flush_time => 10
	}
}
